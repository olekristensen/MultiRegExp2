{"version":3,"sources":["../src/multiRegExp2-test.js"],"names":["testCaseNr","assertRegExpConversion","initial","expected","result","regexp","source","console","log","error","assertRegExpExecution","func","fStr","toString","funcBody","substring","indexOf","lastIndexOf","trim","JSON","stringify","execForAllGroups","match","start","end"],"mappings":";;AAAA;;;;;;AAEA,IAAIA,aAAa,CAAjB;;AAEA,IAAMC,yBAAyB,SAAzBA,sBAAyB,CAACC,OAAD,EAAUC,QAAV,EAAuB;AACpD,MAAMC,SAAS,0BAAiBF,OAAjB,EAA0BG,MAAzC;;AAEAL;AACA,MAAGI,OAAOE,MAAP,KAAkBH,QAArB,EAA+B;AAC7BI,YAAQC,GAAR,eAAwBR,UAAxB,iBAA8CE,QAAQI,MAAtD,YAAmEF,OAAOE,MAA1E,aAAwFH,QAAxF;AACD,GAFD,MAGK;AACHI,YAAQE,KAAR,eAA0BT,UAA1B,gCAA+DE,QAAQI,MAAvE,YAAoFF,OAAOE,MAA3F,aAAyGH,QAAzG;AACD;AACF,CAVD;;AAYA,IAAMO,wBAAwB,SAAxBA,qBAAwB,CAACC,IAAD,EAAOR,QAAP,EAAoB;AAChD,MAAMC,SAASO,MAAf;;AAEA,MAAMC,OAAOD,KAAKE,QAAL,EAAb;AACA,MAAMC,WAAWF,KAAKG,SAAL,CAAeH,KAAKI,OAAL,CAAa,GAAb,IAAkB,CAAjC,EAAoCJ,KAAKK,WAAL,CAAiB,GAAjB,CAApC,EAA2DC,IAA3D,EAAjB;;AAEAlB;AACA,MAAGmB,KAAKC,SAAL,CAAehB,MAAf,MAA2Be,KAAKC,SAAL,CAAejB,QAAf,CAA9B,EAAwD;AACtDI,YAAQC,GAAR,eAAwBR,UAAxB,iBAA8Cc,QAA9C,YAA6DK,KAAKC,SAAL,CAAejB,QAAf,CAA7D;AACD,GAFD,MAGK;AACHI,YAAQE,KAAR,eAA0BT,UAA1B,gCAA+DmB,KAAKC,SAAL,CAAehB,MAAf,CAA/D,aAA6Fe,KAAKC,SAAL,CAAejB,QAAf,CAA7F;AACD;AACF,CAbD;;AAeA;;AAEAF,uBAAuB,WAAvB,EAAoC,aAApC;AACAA,uBAAuB,YAAvB,EAAqC,gBAArC;;AAEAS,sBACE;AAAA,SAAM,0BAAiB,IAAjB,EAAuBW,gBAAvB,CAAwC,KAAxC,CAAN;AAAA,CADF,EAEE,CAAC,EAACC,OAAO,GAAR,EAAaC,OAAO,CAApB,EAAuBC,KAAK,CAA5B,EAAD,CAFF","file":"multiRegExp2-test.js","sourcesContent":["import MultiRegExp2 from './multiRegExp2'\n\nlet testCaseNr = 0;\n\nconst assertRegExpConversion = (initial, expected) => {\n  const result = new MultiRegExp2(initial).regexp;\n\n  testCaseNr++;\n  if(result.source === expected) {\n    console.log(`TestCase ${testCaseNr} passed: ${initial.source} => ${result.source} === ${expected}`);\n  }\n  else {\n    console.error(`TestCase ${testCaseNr} failed: Asserting that ${initial.source} => ${result.source} === ${expected}`);\n  }\n};\n\nconst assertRegExpExecution = (func, expected) => {\n  const result = func();\n\n  const fStr = func.toString();\n  const funcBody = fStr.substring(fStr.indexOf('{')+1, fStr.lastIndexOf('}')).trim();\n\n  testCaseNr++;\n  if(JSON.stringify(result) === JSON.stringify(expected)) {\n    console.log(`TestCase ${testCaseNr} passed: ${funcBody} => ${JSON.stringify(expected)}`);\n  }\n  else {\n    console.error(`TestCase ${testCaseNr} failed. Asserting that ${JSON.stringify(result)} === ${JSON.stringify(expected)}`);\n  }\n}\n\n// ### Beginning of TestCases #########################################################################\n\nassertRegExpConversion(/a(?:(b))?/, \"(a)(?:(b))?\");\nassertRegExpConversion(/a(?:c(b))?/, \"(a)(?:(c)(b))?\");\n\nassertRegExpExecution(\n  () => new MultiRegExp2(/\\(/).execForAllGroups(\"a(b\"),\n  [{match: \"(\", start: 1, end: 2}]\n);\n"]}